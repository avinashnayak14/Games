#BlueJ class context
comment0.params=args
comment0.target=void\ main(java.lang.String[])
comment1.params=
comment1.target=Solitaire()
comment1.text=\n\ The\ constructor\ for\ the\ game\ of\ Solitaire.\ It\ sets\ up\ the\ game.\n
comment10.params=index
comment10.target=void\ pileClicked(int)
comment10.text=\n\ Executes\ the\ necessary\ actions\ when\ a\ pile\ is\ clicked,\ including\ \n\ unselecting\ cards\ and/or\ moving\ them\ to\ other\ piles.\n\ \n\ @param\ index\ the\ index\ of\ the\ pile\ that\ was\ clicked\n
comment11.params=
comment11.target=void\ createStock()
comment11.text=\n\ Creates\ a\ stock\ of\ 52\ randomly\ shuffled\ cards\ in\ a\ standard\ deck.\ \n
comment12.params=
comment12.target=void\ deal()
comment12.text=\n\ Deals\ cards\ from\ the\ stock\ to\ the\ 7\ piles\ in\ the\ arrangement\ shown\ in\ \n\ the\ picture\ earlier\ in\ the\ lab.\ It\ is\ called\ from\ the\ constuctor.\n
comment13.params=
comment13.target=void\ dealThreeCards()
comment13.text=\n\ Moves\ the\ top\ three\ cards\ from\ the\ stock\ onto\ the\ top\ of\ the\ waste.\ If\ \n\ there\ are\ fewer\ than\ three\ cards\ on\ the\ stock,\ it\ should\ transfer\ \n\ whatever\ is\ left\ to\ waste.\ It\ must\ turn\ up\ each\ card\ moved\ onto\ waste.\n
comment14.params=
comment14.target=void\ resetStock()
comment14.text=\n\ Repeatedly\ moves\ the\ top\ card\ from\ the\ waste\ to\ the\ top\ of\ the\ stock\ \n\ until\ no\ cards\ are\ left\ in\ the\ waste.\n
comment15.params=card\ index
comment15.target=boolean\ canAddToPile(Card,\ int)
comment15.text=\n\ Tests\ if\ a\ certain\ type\ of\ card\ can\ be\ moved\ to\ the\ top\ of\ a\ given\ pile.\n\ \n\ @param\ Card\ the\ card\ that\ might\ be\ able\ to\ be\ added\ to\ a\ pile\n\ @param\ index\ the\ index\ of\ the\ pile\ that\ a\ card\ might\ be\ able\ to\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ be\ added\ to\n\ @return\ true\ if\ a\ card\ can\ be\ legally\ added\ to\ a\ pile;\ otherwise,\ false\n
comment16.params=index
comment16.target=java.util.Stack\ removeFaceUpCards(int)
comment16.text=\n\ Takes\ away\ all\ the\ face-up\ cards\ on\ the\ top\ of\ the\ given\ pile.\n\ \n\ @param\ index\ the\ index\ of\ the\ pile\ from\ which\ face-up\ cards\ must\ be\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ removed\n\ @return\ Stack<Card>\ all\ the\ face-up\ cards\ on\ the\ top\ of\ the\ given\ pile\n
comment17.params=cards\ index
comment17.target=void\ addToPile(java.util.Stack,\ int)
comment17.text=\n\ Takes\ away\ all\ elements\ from\ cards\ and\ puts\ them\ on\ the\ given\ pile.\n\ \n\ @param\ Stack<Card>\ cards\ a\ bunch\ of\ cards\ to\ be\ added\ to\ a\ pile\n\ @param\ index\ the\ index\ of\ a\ pile\ that\ cards\ need\ to\ be\ added\ to\n
comment18.params=card\ index
comment18.target=boolean\ canAddToFoundation(Card,\ int)
comment18.text=\n\ Tests\ if\ a\ card\ can\ be\ added\ to\ the\ foundation\ by\ the\ given\ rules.\n\ \n\ @param\ Card\ a\ card\ that\ could\ be\ added\ to\ the\ foundation\n\ @param\ index\ the\ index\ of\ the\ foundation\ that\ a\ card\ could\ be\ added\ to\n\ @return\ true\ if\ a\ card\ can\ be\ added\ to\ the\ foundation;\ otherwise,\ false\n
comment2.params=
comment2.target=void\ printMenu()
comment2.text=\n\ Prints\ the\ menu\ that\ tells\ the\ user\ what\ to\ do.\n
comment3.params=
comment3.target=Card\ getStockCard()
comment3.text=\n\ Returns\ the\ card\ on\ top\ of\ the\ stock.\n\ \n\ @return\ the\ card\ on\ top\ of\ the\ stock\ or\ null\ if\ the\ stock\ is\ empty\n
comment4.params=
comment4.target=Card\ getWasteCard()
comment4.text=\n\ Returns\ the\ card\ on\ the\ top\ of\ the\ waste.\n\ \n\ @return\ the\ card\ on\ top\ of\ the\ waste\ or\ null\ if\ the\ waste\ is\ empty\n
comment5.params=index
comment5.target=Card\ getFoundationCard(int)
comment5.text=\n\ Returns\ the\ card\ on\ top\ of\ the\ given\ foundation.\n\ \n\ @param\ index\ the\ index\ of\ the\ foundation\ with\ the\ card\ to\ be\ returned\n\ @return\ the\ card\ on\ the\ top\ of\ foundation[index]\n
comment6.params=index
comment6.target=java.util.Stack\ getPile(int)
comment6.text=\n\ Returns\ a\ pile\ with\ a\ given\ index.\n\ \n\ @param\ index\ the\ index\ of\ the\ pile\ that\ should\ be\ returned\n\ @return\ Stack<Card>\ a\ reference\ to\ the\ given\ pile\n
comment7.params=
comment7.target=void\ stockClicked()
comment7.text=\n\ Executes\ the\ necessary\ actions\ when\ a\ stock\ is\ clicked,\ which\ involves\ \n\ testing\ cards\ at\ the\ top\ of\ the\ waste.\n
comment8.params=
comment8.target=void\ wasteClicked()
comment8.text=\n\ Executes\ the\ necessary\ actions\ when\ waste\ is\ clicked,\ which\ involves\ \n\ selecting\ or\ unselecting\ cards.\n
comment9.params=index
comment9.target=void\ foundationClicked(int)
comment9.text=\n\ Executes\ the\ necessary\ actions\ when\ foundations\ is\ clicked,\ which\ \n\ invovles\ moving\ cards\ to\ the\ foundation.\n\ \n\ @param\ index\ the\ index\ of\ the\ foundation\ that\ was\ clicked\n
numComments=19
